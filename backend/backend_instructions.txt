Install dependencies: 

npm i

Starting Backend server: 

npm run start-server

Starting backend dev server:

npm run start-server-dev

Dev mode (nodemon) monitors for any changes and 
automatically restarts the server when changes are detected.

//Endpoint: {/api/getresponse}
Request:
    Method: POST
    Body: { message: string }

Response:
    messages: [{
        role: string,
        message: string
    }]

Create a .env file and add the following (remember to keep .env in your gitignore file)

NOROFF_API_KEY=YOUR_KEY_HERE
PORT=DESIRED_PORT_NUMBER

Making Requests:

Once the server is up and running, you can make requests to it using tools like Postman, 
curl, or by integrating it with your front-end application.

Stopping the server:

    ctrl + C

BED FLOW EXPLANATION 
FED:
1. User input message in the aitest.html and clicks the send button
2. From the frontend side, sendMessage function is triggered in chat.js. The function:
3. Retrieves the user message
4. Sends the message using the express backeend link http://localhost:3001/make-api-call using POST method
5. Listens for the respone from the backend.
6. If the response is successfull the reponse, the respone message is appended in the DOM
BED
1. From the backend side, the request is received from the incoming POST request
2. The message is extracted using the const userMessage = req.body.message;
3. CreateRequestBody(userMessage) is called with the parameter of the extracted userMessage 
4. The API request is then sent using undici, passung along both the header and the body with the userMessage variable
5. The server waits for the response:
6.1. If successfull, the response body is parsed and logged. The data is then sent back to the frontend
6.2  If unsuccessfull, any error message is parsed and logged and sent to the frontend
BED TO FED
7. Back in the frontend/chat.js, the sendMessage function will process the response data
8. If successfull it extracts the message content. 


Example of Response Objects to use for client side:
Response: {
  id: ,
  object: ,
  created: ,
  model: ,
  choices: [
    {
      index: 0,
      message: [],
      logprobs: ,
      finish_reason: 
    }
  ],
  usage: { },
  system_fingerprint: 'fp_4f0b692a78'
}
Formatted Response: {
  "id": "",
  "object": "",
  "created": ,
  "model": "",
  "choices": [
    {
      "index": ,
      "message": {
        "role": "",
        "content": "I am AIMOTðŸ¤– Your friendly planning-bot, here to help you plan your tasks and activities! Before we create a food schedule for you, could you please provide me with more details? Such as your dietary preferences, schedule, and any specific goals you have in mind for your meals."
      },
      "logprobs": ,
      "finish_reason": ""
    }
  ],
  "usage": {
    "prompt_tokens": ,
    "completion_tokens": ,
    "total_tokens": 
  },
  "system_fingerprint": ""
}